"""Задание 1. «Я стал новым пиратом!»
Старому капитану нужно пополнить команду, но на корабль попадут только достойные!
Он отобрал десять человек. Те, кто крикнет слово «Карамба», попадут на борт.

Что нужно сделать
Пользователь вводит десять слов. Напишите программу, которая определяет, сколько из них совпадают со словом «Карамба».

Что оценивается
Задание считается успешно выполненным, если:

результат вывода соответствует условию;
input содержит корректное приглашение для ввода;
программа игнорирует регистр первой буквы К;
переменные имеют значащие имена, не только a, b, c, d (видео 2.3)."""
# lst_of_pass = []
# for pas_num in range(1, 11):
#     lst_of_pass.append(True if input(f'Введите {pas_num} пиратский пароль: ').lower() == 'карамба' else False)
# print(f'Кол-во совпадений: {sum(lst_of_pass)}')
######################################################################################################################
"""Задание 2. Кривой мессенджер
Существует мессенджер, в котором иногда возникают неполадки при передаче сообщений:
 в них попадает лишний символ — звёздочка. Пользователям это надоело, поэтому они стали уходить в другие сервисы.
Но один из них заинтересовался, на каких позициях обычно появляется звёздочка. Чтобы выяснить это, 
пользователю необходимо подготовить строки, в которых символ «*» встречается ровно один раз. 

Что нужно сделать
Напишите программу, которая определяет порядковый номер звёздочки в строке.

Пример:

Введите текст: «Пр*ивет как дела».

Символ «*» стоит на позиции 3."""

# test_str = input("Введите текст: ")
# print(f'Символ «*» стоит на позиции {test_str.index("*") + 1}.')
# #для регистрации всех вхождений:
# print(*[f'Символ «*» стоит на позиции {indx + 1}.' for indx, symb in enumerate(test_str) if symb == "*"])
######################################################################################################################
"""Задание 3. Театр
В городе планируют построить театр под открытым небом, но для начала нужно оценить,
 сколько сделать рядов, сидений в них и каким должно быть расстояние между рядами.

Что нужно сделать
Напишите программу, которая получает на вход количество рядов, сидений и свободных 
метров между рядами, а затем выводит примерный макет театра на экран."""

# rows = int(input('Введите кол-во рядов: '))
# seats = int(input('Введите кол-во сидений: '))
# m_between = int(input('Введите кол-во метров между рядами: '))
#
# for i in range(rows):
#     print('=' *seats, '*' * m_between, '=' *seats)
########################################################################################################################
"""Задание 4. Марсоход-2
К роботу Валли отправили «коллегу» Билли. Это его первая высадка на Марс, поэтому его тестируют
 в прямоугольном помещении размером 15 × 20 м. Марсоход высаживается в центре комнаты (в точке 8, 10),
  затем управление им передаётся оператору, то есть пользователю вашей программы. 

Программа спрашивает, в какую сторону оператор хочет направить робота: север (клавиша W), юг (клавиша S),
 запад (клавиша A) или восток (клавиша D). Оператор делает выбор, марсоход перемещается в эту сторону на один метр,
  а программа сообщает новую позицию робота. Если марсоход упёрся в стену, он не должен пытаться переместиться
   в сторону стены — в этом случае его позиция не меняется. 

Что нужно сделать
Создайте программу для управления роботом Билли."""

# vertical = 8
# horizontal = 10
# cmd_in = input(f' Марсоход находится на позиции {vertical}, {horizontal}, введите команду: (q - выход)')
# while cmd_in != 'q':
#     if cmd_in == 'a':
#         horizontal += 1 if horizontal < 15 else 0
#     elif cmd_in == 'd':
#         horizontal -= 1 if horizontal > 0 else 0
#     elif cmd_in == 'w':
#         vertical += 1 if vertical < 20 else 0
#     elif cmd_in == 's':
#         vertical -= 1 if vertical > 0 else 0
#     else:
#         print('неверная команда')
#     cmd_in = input(f' Марсоход находится на позиции {vertical}, {horizontal}, введите команду: (q - выход)')
########################################################################################################################
"""Задание 5. Великий и могучий
Паоло изучает русский язык: занимается по учебникам, читает книги, слушает музыку. Ему особенно понравилась книга
 «Преступление и наказание». Паоло решил найти самое длинное слово в этой книге, чтобы сравнить его с аналогом на
  своём языке.

Что нужно сделать
Напишите программу, которая получает на вход текст и находит длину самого длинного слова в нём. Слова в тексте 
разделяются одним пробелом.

Пример:

Введите текст: Меня зовут Пётр.
Самое длинное слово, букв: 5.

Введите текст: Меня зовут Василий
Самое длинное слово, 7 букв"""

# print(f'Самое длинное слово, {len(sorted(list(input('Введите текст: ').split()), key=lambda x:len(x))[-1])}знаков')
#                                 # or..--------------------->
# lst = list(input('Введите текст: ').split())
# is_longest = lst[0]
# for word in lst:
#     if len(word) > len(is_longest):
#         is_longest = word
# print(is_longest)
# print(f'Самое длинное слово, {len(is_longest)} знаков')
#######################################################################################################################
"""Задание 6. Коровы
Для коров есть 10 стойл. В каждом из них условия для животных разные, поэтому и молока они дают по-разному.
 В первом стойле производят 2 литра в день, во втором — 4, в третьем — 6, далее — 8, 10, 12, 14, 16, 18 и 20.
  При этом коровы находятся не во всех стойлах. Свободные и занятые обозначаются строкой из букв a и b,
   где a — свободное стойло, b — занятое.

Что нужно сделать
Напишите программу для подсчёта получаемого молока в коровнике. Важно учитывать следующее взаимодействие:
 пользователь вводит строку из десяти символов a и b. Необходимо определить,
  сколько в итоге будет произведено молока за день."""
# lst = list(input('Введите данные: '))
# total_liters = 0
# for place, status in enumerate(lst, start=1):
#     if status == 'a':
#         continue
#     total_liters +=  place * 2
# print(f'Надоили: {total_liters}')
###################################################################################
"""Задание 7. Метод бутерброда
В секретном агентстве Super-Secret-no решили использовать «метод бутерброда» для шифрования переписки своих сотрудников.
 Сначала буквы слова нумеруются в таком порядке: первая буква получает номер 1,
  последняя буква — номер 2, вторая — номер 3, предпоследняя — номер 4,
   потом третья… и так для всех букв (см. рисунок). Затем все буквы записываются в шифр в порядке своих номеров.
Например, слово sandwich зашифруется в shacnidw.
Программист Super-Secret-no написал программу шифрования и уволился. Теперь агенты не могут понять, что они написали друг другу.
Что нужно сделать
Напишите программу-дешифратор, которая расшифровала бы введённые сообщения.
Пример:

Введите зашифрованное сообщение: shacnidw.
Расшифрованное сообщение: sandwich."""
# x_message = list(input('Введите зашифрованное сообщение: '))
# public_message = ''
# for index in range(len(x_message)):
#     if index % 2 == 0:
#         public_message += x_message[index]
# x_message.reverse()
# for index in range(len(x_message)):
#     if index % 2 == 0:
#         public_message += x_message[index]
#
# print(f'Расшифрованное сообщение: {public_message}')

# Во избежания дублирования кода----------------------------------->

# x_message = input('Введите зашифрованное сообщение: ')
# public_message = ''
#
# def decoder(str_in: str) -> str:
#     pub_message = ''
#     for i in range(0, len(x_message), 2):
#         pub_message += str_in[i]
#     return pub_message
#
# public_message += decoder(x_message) + decoder(x_message[::-1])
# print(f'Расшифрованное сообщение: {public_message}')
#######################################################################################################################
"""Задание 8. Древний палиндром
Контекст 
Вы археолог, который исследует древний свиток с таинственным посланием. Согласно легенде,
 если вы сможете прочитать палиндром из этого послания, то раскроете его секреты. Свиток очень постарел,
  и некоторые буквы стёрлись. Вам нужно разработать программу, которая поможет определить,
   является ли фрагмент послания, введённый пользователем, палиндромом. Если ваша программа справится с заданием,
    вы приблизитесь к разгадке древней тайны.

Задача 
Напишите программу, которая определяет, является ли введённая строка палиндромом.
Если введённая строка — палиндромом, выведите сообщение «Да, это палиндром!»
В противном случае выведите сообщение «Нет, это не палиндром!»"""

# _str = input('Введите исследуемую строку: ').replace(' ', '')
# print('Да, это палиндром!' if _str == _str[::-1] else '«Нет, это не палиндром!')

# or ----------------------------------------------------------------------->

# string = input('Введите исследуемую строку: ').replace(' ', '').lower()
# # альткрнативное формирование строки---------------->
# # alt_string = list(input('Введите исследуемую строку: '))
# # string = ''
# # for item in alt_string:
# #     if item != ' ':
# #         string += item.lower() if item != ' ' else item
# 
# for index in range(len(string)):
#     if string[index] != string[-(index + 1)]:
#         flag = False
#         break
#     flag = True
# 
# print('Да, это палиндром!' if flag else '«Нет, это не палиндром!')
